// ===================
// Silent parsed rules
// ===================
//
// These are rules which need to be parsed for file correctness but don't need
// to be tokenized or otherwise used in the AST.
//
// Wherever there is possible collision with rust keywords, the prefix tla_
// is used (e.g. modules).

// https://docs.rs/pest/latest/pest/#whitespace-and-comment
// Things get weird when we add NEWLINE here -- pest thinks multiple newlines
// are allowed in module declarations which breaks the
// multiple_nested_modules test. Keep NEWLINE explicit.
WHITESPACE = _{ " " | "\t" }

single_line = _{ "----" ~ "-"* }
double_line = _{ "====" ~ "="* }
def_eq = _{ "==" }
tla_mod_decl = _{ "MODULE" }

// ===================
// Base values
// ===================

ident = @{ ASCII_ALPHA ~ (ASCII_ALPHA | ASCII_DIGIT)* }

literal_value = { number_lit | string_lit | number_set_lit | string_set_lit }

nat_lit = @{ ASCII_DIGIT+ }
binary_lit = @{ ^"\\b" ~ ( "0" | "1" )+ }
octal_lit = @{ ^"\\o" ~ ( '0'..'7' )+ }
hex_lit = @{ ^"\\h" ~ ( ASCII_DIGIT | 'a'..'f' | 'A'..'F' )+ }
real_lit = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
number_lit = { real_lit | nat_lit | binary_lit | octal_lit | hex_lit }

nat_numbers_lit = { "Nat" }
int_numbers_lit = { "Int" }
real_numbers_lit = { "Real" }
number_set_lit = { nat_numbers_lit | int_numbers_lit | real_numbers_lit }

string_set_lit = { "STRING" }

string_lit = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

// ===================
// Structured literals
// ===================

seq_lit = { "<<" ~ expr ~ ("," ~ expr)* ~ ">>" }

// ===================
// Files and Modules
// ===================

source_file = { NEWLINE* ~ tla_mod+ ~ NEWLINE* }

tla_mod = {
  single_line ~ tla_mod_decl ~ ident ~ single_line ~ NEWLINE*
  ~ (op_defn | tla_mod | extends_list)* ~ NEWLINE*
  ~ double_line ~ NEWLINE*
}

extends_list = {
  "EXTENDS" ~ ident ~ ("," ~ ident)* ~ NEWLINE*
}

// ===================
// Other things (TODO sort)
// ===================

expr = {
  (literal_value | ident | seq_lit) ~ NEWLINE*
}

op_defn = {
  ident ~ def_eq ~ expr ~ NEWLINE*
}