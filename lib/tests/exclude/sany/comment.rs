
// This file was generated by scripts/gen_parser_tests.py
// Do not edit this file directly.

mod read_and_parse;


#[test]
fn solitary_comment() {
  read_and_parse::test("testdata/exclude/sany/comment.tla", "Solitary Comment");
}


#[test]
fn comment_in_definition() {
  read_and_parse::test("testdata/exclude/sany/comment.tla", "Comment In Definition");
}


#[test]
fn solitary_block_comment() {
  read_and_parse::test("testdata/exclude/sany/comment.tla", "Solitary Block Comment");
}


#[test]
fn block_comment_in_expression() {
  read_and_parse::test("testdata/exclude/sany/comment.tla", "Block Comment in Expression");
}


#[test]
fn nested_block_comment() {
  read_and_parse::test("testdata/exclude/sany/comment.tla", "Nested Block Comment");
}


#[test]
fn complicated_block_comment() {
  read_and_parse::test("testdata/exclude/sany/comment.tla", "Complicated Block Comment");
}


#[test]
fn lookahead_block_comment() {
  read_and_parse::test("testdata/exclude/sany/comment.tla", "Lookahead Block Comment");
}


#[test]
fn block_comment_in_conjlist() {
  read_and_parse::test("testdata/exclude/sany/comment.tla", "Block Comment in Conjlist");
}


#[test]
fn block_comment_in_disjlist() {
  read_and_parse::test("testdata/exclude/sany/comment.tla", "Block Comment in Disjlist");
}


#[test]
fn fancy_block_comment() {
  read_and_parse::test("testdata/exclude/sany/comment.tla", "Fancy Block Comment");
}


#[test]
fn multiple_fancy_block_comments() {
  read_and_parse::test("testdata/exclude/sany/comment.tla", "Multiple Fancy Block Comments");
}


#[test]
fn sequential_nested_block_comments() {
  read_and_parse::test("testdata/exclude/sany/comment.tla", "Sequential Nested Block Comments");
}


#[test]
fn block_comments_separated_by_single_line() {
  read_and_parse::test("testdata/exclude/sany/comment.tla", "Block Comments Separated By Single Line");
}


#[test]
fn block_comments_separated_by_two_lines() {
  read_and_parse::test("testdata/exclude/sany/comment.tla", "Block Comments Separated By Two Lines");
}


#[test]
fn block_comment_with_nested_line_comment() {
  read_and_parse::test("testdata/exclude/sany/comment.tla", "Block Comment With Nested Line Comment");
}

