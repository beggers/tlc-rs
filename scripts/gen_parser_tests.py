# I want each test case in testdata/ to be its own test case in the test suite.
# This provides several benefits:
# 1. Tests can be run in parallel, which is faster.
# 2. Tests can be run in isolation, which gives more granular debugging signal.
# 3. We can track overall parser completeness by number of tests passed.
# 4. We can set up incremental CI by only enabling those tests we expect to
#    pass.
#
# This script generates the tests.
# I would like it to remain as dumb as possible.

import os
import re

LIB_DIR = "lib"
TESTDATA_DIR = "testdata"
TEST_DIR = "tests"

TEST_FILE_HEADER = """
// This file was generated by scripts/gen_parser_tests.py
// Do not edit this file directly.

mod read_and_parse;

"""
TEST_FUNCTION_TEMPLATE = """
#[test]
fn {rust_test_function_name}() {{
  read_and_parse::test("{filename}", "{tla_test_name}");
}}

"""
# Match everything of the form "
# ==================|||
# Test Name
# ==================|||
TLA_TEST_REGEX = r"===+\|\|\|\s*([\w\s]+)\s*===+\|\|\|"


def gen_test_file_name(filename):
  filename = filename.replace(TESTDATA_DIR, TEST_DIR)
  return filename.replace(".tla", ".rs")


def gen_test_function_name(tla_test_name):
  return tla_test_name.strip().replace(" ", "_").lower()


def gen_test_function(filename, tla_test_name):
  return TEST_FUNCTION_TEMPLATE.format(
    rust_test_function_name=gen_test_function_name(tla_test_name),
    filename=filename.replace(LIB_DIR + "/", ""),
    tla_test_name=tla_test_name,
  )


def get_all_tla_file_names():
  all_files = []
  for root, _, files in os.walk(LIB_DIR + "/" + TESTDATA_DIR):
    for file in files:
      if file.endswith(".tla"):
        all_files.append(os.path.join(root, file))
  return all_files


def get_all_test_names(filename):
  with open(filename, "r") as f:
    contents = f.read()
    return map(lambda s: s.strip(), re.findall(TLA_TEST_REGEX, contents), )


def main():
  tla_test_files = get_all_tla_file_names()
  for tla_test_file in tla_test_files:
    tla_test_names = get_all_test_names(tla_test_file)
    test_file = gen_test_file_name(tla_test_file)
    os.makedirs(os.path.dirname(test_file), exist_ok=True)
    with open(test_file, "w") as f:
      f.write(TEST_FILE_HEADER)
      for tla_test_name in tla_test_names:
        f.write(gen_test_function(tla_test_file, tla_test_name))


if __name__ == '__main__':
  main()
